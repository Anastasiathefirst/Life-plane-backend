import APIError from '~/utils/apiError';
import tokenService from '~/services/tokenService';
import emailService from '~/services/emailService';
import User from '~/models/userModel';
import httpStatus from 'http-status';
import Role from '~/models/roleModel';
import * as sphereController from '~/controllers/sphereController';

export const signup = async (req, res) => {
  try {
    console.log('‚û°Ô∏è Signup request headers:', JSON.stringify(req.headers));
    console.log('‚û°Ô∏è Signup raw body:', JSON.stringify(req.body));

    if (!req.is('application/json')) {
      throw new APIError('Invalid Content-Type', httpStatus.BAD_REQUEST);
    }

    const { email, password, firstName, lastName, userName } = req.body;
    
    if (!email || !password || !firstName || !lastName || !userName) {
      throw new APIError('Missing required fields', httpStatus.BAD_REQUEST);
    }

    console.log('üîç Checking existing user for email:', email);
    const existingUser = await User.getUserByEmail(email);
    if (existingUser) {
      console.warn('‚ö†Ô∏è User already exists:', email);
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', httpStatus.CONFLICT);
    }

    console.log('üîç Getting User role');
    const role = await Role.getRoleByName('User');
    if (!role) {
      throw new APIError('Role not found', httpStatus.INTERNAL_SERVER_ERROR);
    }

    console.log('üõ† Creating new user');
    const user = await User.createUser({
      email,
      password,
      firstName,
      lastName,
      userName,
      roles: [role.id],
      confirmed: false,
    });

    if (!user) {
      throw new APIError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', httpStatus.INTERNAL_SERVER_ERROR);
    }

    console.log('üîë Generating verification token');
    const verifyToken = await tokenService.generateVerifyEmailToken(user);
    
    console.log('üîë Generating auth tokens');
    const tokens = await tokenService.generateAuthTokens(user);

    console.log('üì® Sending verification email');
    await emailService.sendVerificationEmail(user.email, verifyToken);
    
    console.log('üåê Creating initial spheres');
    await sphereController.createInitialSpheres(user.id);

    console.log('‚úÖ User registration successful');
    return res.status(httpStatus.CREATED).json({
      success: true,
      data: { 
        user: {
          id: user.id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          userName: user.userName
        },
        tokens 
      },
    });
  } catch (err) {
    console.error('üî• Error in signup:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const verifyEmail = async (req, res) => {
  try {
    console.log('üîç Verifying email token:', req.query.token);
    const { token } = req.query;

    if (!token) {
      throw new APIError('Token is required', httpStatus.BAD_REQUEST);
    }

    const user = await User.findOneAndUpdate(
      { 
        verifyToken: token,
        verifyTokenExpires: { $gt: Date.now() }
      },
      { 
        $set: { confirmed: true },
        $unset: { verifyToken: 1, verifyTokenExpires: 1 }
      },
      { new: true }
    );

    if (!user) {
      throw new APIError('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è', httpStatus.BAD_REQUEST);
    }

    console.log('‚úÖ Email confirmed for:', user.email);
    return res.json({
      success: true,
      message: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
    });
  } catch (err) {
    console.error('‚ùå Error in verifyEmail:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const signin = async (req, res) => {
  try {
    console.log('üîë Signin request:', JSON.stringify(req.body));
    const { userName, password } = req.body;

    if (!userName || !password) {
      throw new APIError('Username and password are required', httpStatus.BAD_REQUEST);
    }

    console.log('üîç Finding user:', userName);
    const user = await User.getUserByUserName(userName);
    if (!user) {
      throw new APIError('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', httpStatus.UNAUTHORIZED);
    }

    console.log('üîê Checking password');
    const isPasswordMatch = await user.isPasswordMatch(password);
    if (!isPasswordMatch) {
      throw new APIError('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', httpStatus.UNAUTHORIZED);
    }

    if (!user.confirmed) {
      throw new APIError('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', httpStatus.UNAUTHORIZED);
    }

    console.log('üîë Generating auth tokens');
    const tokens = await tokenService.generateAuthTokens(user);

    console.log('‚úÖ Login successful for:', user.userName);
    return res.json({
      success: true,
      data: { 
        user: {
          id: user.id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          userName: user.userName
        },
        tokens 
      },
    });
  } catch (err) {
    console.error('‚ùå Error in signin:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const current = async (req, res) => {
  try {
    console.log('üë§ Getting current user:', req.user.id);
    const user = await User.getUserByIdWithRoles(req.user.id);
    if (!user) {
      throw new APIError('User not found', httpStatus.NOT_FOUND);
    }
    return res.json({ 
      success: true, 
      data: user 
    });
  } catch (err) {
    console.error('‚ùå Error in current:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const refreshTokens = async (req, res) => {
  try {
    console.log('üîÑ Refreshing tokens with:', req.body.refreshToken);
    const { refreshToken } = req.body;
    
    if (!refreshToken) {
      throw new APIError('Refresh token is required', httpStatus.BAD_REQUEST);
    }

    const user = await tokenService.verifyRefreshToken(refreshToken);
    const tokens = await tokenService.generateAuthTokens(user);

    console.log('‚úÖ Tokens refreshed for:', user.id);
    return res.json({ 
      success: true, 
      data: { tokens } 
    });
  } catch (err) {
    console.error('‚ùå Error in refreshTokens:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const sendVerificationEmail = async (req, res) => {
  try {
    console.log('üì® Request to send verification email for:', req.user.id);
    const user = await User.getUserById(req.user.id);
    if (!user) {
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', httpStatus.NOT_FOUND);
    }

    if (user.confirmed) {
      return res.json({ 
        success: true, 
        message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' 
      });
    }

    const verifyToken = await tokenService.generateVerifyEmailToken(user);
    await emailService.sendVerificationEmail(user.email, verifyToken);

    console.log('‚úÖ Verification email sent to:', user.email);
    return res.json({ 
      success: true, 
      message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' 
    });
  } catch (err) {
    console.error('‚ùå Error in sendVerificationEmail:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const forgotPassword = async (req, res) => {
  try {
    console.log('üîë Forgot password request for:', req.body.email);
    const { email } = req.body;
    
    if (!email) {
      throw new APIError('Email is required', httpStatus.BAD_REQUEST);
    }

    const user = await User.getUserByEmail(email);
    if (!user) {
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', httpStatus.NOT_FOUND);
    }

    const resetToken = await tokenService.generateVerifyEmailToken(user);
    await emailService.sendResetPasswordEmail(user.email, resetToken);

    console.log('‚úÖ Reset password email sent to:', email);
    return res.json({ 
      success: true, 
      message: '–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' 
    });
  } catch (err) {
    console.error('‚ùå Error in forgotPassword:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const resetPassword = async (req, res) => {
  try {
    console.log('üîÑ Resetting password with token:', req.query.token);
    const { token } = req.query;
    const { password } = req.body;
    
    if (!token || !password) {
      throw new APIError('Token and password are required', httpStatus.BAD_REQUEST);
    }

    const user = await User.findOneAndUpdate(
      { 
        resetToken: token,
        resetTokenExpires: { $gt: Date.now() }
      },
      { 
        password,
        $unset: { resetToken: 1, resetTokenExpires: 1 }
      },
      { new: true }
    );

    if (!user) {
      throw new APIError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω', httpStatus.BAD_REQUEST);
    }

    console.log('‚úÖ Password reset for:', user.email);
    return res.json({ 
      success: true, 
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' 
    });
  } catch (err) {
    console.error('‚ùå Error in resetPassword:', err);
    res.status(err.status || httpStatus.INTERNAL_SERVER_ERROR).json({
      status: err.status || httpStatus.INTERNAL_SERVER_ERROR,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export default {
  signup,
  signin,
  current,
  refreshTokens,
  sendVerificationEmail,
  verifyEmail,
  forgotPassword,
  resetPassword
};