import APIError from '~/utils/apiError';
import tokenService from '~/services/tokenService';
import emailService from '~/services/emailService';
import User from '~/models/userModel';
import httpStatus from 'http-status';
import Role from '~/models/roleModel';
import * as sphereController from '~/controllers/sphereController';

export const signup = async (req, res) => {
  try {
    console.log('‚û°Ô∏è Signup request body:', req.body);

    const { email, password, firstName, lastName, userName } = req.body;
    const existingUser = await User.getUserByEmail(email);
    console.log('‚û°Ô∏è existingUser:', existingUser);
    if (existingUser) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', httpStatus.CONFLICT);
    }

    const role = await Role.getRoleByName('User');
    console.log('‚û°Ô∏è role:', role);

    const user = await User.createUser({
      email,
      password,
      firstName,
      lastName,
      userName,
      roles: [role.id],
      confirmed: false,
    });
    console.log('‚û°Ô∏è Created user:', user);
    if (!user) {
      throw new APIError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', httpStatus.INTERNAL_SERVER_ERROR);
    }

    const verifyToken = await tokenService.generateVerifyEmailToken(user);
    console.log('‚û°Ô∏è Generated verifyToken:', verifyToken);

    user.verifyToken = verifyToken;
    user.verifyTokenExpires = Date.now() + 3600_000;
    await user.save();
    console.log('‚û°Ô∏è user saved with verifyToken');

    await emailService.sendVerificationEmail(user.email, verifyToken);
    console.log('‚û°Ô∏è Verification email sent to:', user.email);

    await sphereController.createInitialSpheres(user.id);
    console.log('‚û°Ô∏è Initial spheres created for user');

    const tokens = await tokenService.generateAuthTokens(user);
    console.log('‚úÖ Tokens generated:', tokens);

    return res.json({
      success: true,
      data: { user, tokens },
    });
  } catch (err) {
    console.error('üî• Error in signup:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const verifyEmail = async (req, res) => {
  try {
    console.log('üîç Verifying email token:', req.query.token);
    const { token } = req.query;
    const user = await User.findOne({
      verifyToken: token,
      verifyTokenExpires: { $gt: Date.now() },
    });
    console.log('‚û°Ô∏è Found user for verifyEmail:', user);

    if (!user) {
      throw new APIError('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è', httpStatus.BAD_REQUEST);
    }

    user.confirmed = true;
    user.verifyToken = undefined;
    user.verifyTokenExpires = undefined;
    await user.save();
    console.log('‚úÖ Email confirmed for:', user.email);

    return res.json({
      success: true,
      message: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
    });
  } catch (err) {
    console.error('‚ùå Error in verifyEmail:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const signin = async (req, res) => {
  try {
    console.log('üîë Signin body:', req.body);
    const { userName, password } = req.body;
    const user = await User.getUserByUserName(userName);
    console.log('‚û°Ô∏è Found user for signin:', user);

    if (!user || !(await user.isPasswordMatch(password))) {
      throw new APIError('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', httpStatus.UNAUTHORIZED);
    }
    if (!user.confirmed) {
      throw new APIError('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', httpStatus.UNAUTHORIZED);
    }

    const tokens = await tokenService.generateAuthTokens(user);
    console.log('‚úÖ Signin tokens:', tokens);

    return res.json({
      success: true,
      data: { user, tokens },
    });
  } catch (err) {
    console.error('‚ùå Error in signin:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const current = async (req, res) => {
  try {
    console.log('üë§ Getting current user:', req.user.id);
    const user = await User.getUserByIdWithRoles(req.user.id);
    return res.json({ success: true, data: user });
  } catch (err) {
    console.error('‚ùå Error in current:', err);
    res.status(500).json({ status: 500, errors: 'Internal Server Error' });
  }
};

export const getMe = async (req, res) => {
  try {
    console.log('üë§ Getting getMe user:', req.user.id);
    const user = await User.getUserById(req.user.id);
    return res.json({ success: true, data: user });
  } catch (err) {
    console.error('‚ùå Error in getMe:', err);
    res.status(500).json({ status: 500, errors: 'Internal Server Error' });
  }
};

export const updateMe = async (req, res) => {
  try {
    console.log('üõ† Updating user:', req.user.id);
    const updated = await User.updateUserById(req.user.id, req.body);
    return res.json({ success: true, data: updated });
  } catch (err) {
    console.error('‚ùå Error in updateMe:', err);
    res.status(500).json({ status: 500, errors: 'Internal Server Error' });
  }
};

export const signout = async (req, res) => {
  console.log('üö™ User signout:', req.user?.id);
  return res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
};

export const refreshTokens = async (req, res) => {
  try {
    console.log('üîÅ Refreshing tokens:', req.body.refreshToken);
    const user = await tokenService.verifyRefreshToken(req.body.refreshToken);
    const tokens = await tokenService.generateAuthTokens(user);
    console.log('‚úÖ Tokens refreshed:', tokens);
    return res.json({ success: true, data: { user, tokens } });
  } catch (err) {
    console.error('‚ùå Error in refreshTokens:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const sendVerificationEmail = async (req, res) => {
  try {
    console.log('üì® sendVerificationEmail for user:', req.user.id);
    const user = await User.getUserById(req.user.id);
    if (!user) {
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', httpStatus.NOT_FOUND);
    }

    const verifyToken = await tokenService.generateVerifyEmailToken(user);
    console.log('‚û°Ô∏è New verifyToken:', verifyToken);

    await emailService.sendVerificationEmail(user.email, verifyToken);
    console.log('üì® Verification email sent to:', user.email);

    return res.json({ success: true, message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('üì© Error in sendVerificationEmail:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const forgotPassword = async (req, res) => {
  try {
    console.log('üîë forgotPassword email:', req.body.email);
    const user = await User.getUserByEmail(req.body.email);
    if (!user) {
      throw new APIError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', httpStatus.NOT_FOUND);
    }

    const resetToken = await tokenService.generateVerifyEmailToken(user);
    console.log('‚û°Ô∏è resetToken:', resetToken);

    user.resetToken = resetToken;
    user.resetTokenExpires = Date.now() + 3600_000;
    await user.save();
    console.log('‚û°Ô∏è User updated with resetToken');

    await emailService.sendResetPasswordEmail(user.email, resetToken);
    console.log('üîÅ Reset password email sent to:', user.email);

    return res.json({ success: true, message: '–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('üîÅ Error in forgotPassword:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export const resetPassword = async (req, res) => {
  try {
    console.log('üîÑ resetPassword token:', req.query.token);
    const { token } = req.query;
    const { password } = req.body;
    const user = await User.findOne({
      resetToken: token,
      resetTokenExpires: { $gt: Date.now() },
    });
    console.log('‚û°Ô∏è Found user for resetPassword:', user);

    if (!user) {
      throw new APIError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω', httpStatus.BAD_REQUEST);
    }

    user.password = password;
    user.resetToken = undefined;
    user.resetTokenExpires = undefined;
    await user.save();
    console.log('‚úÖ Password reset successful for:', user.email);

    return res.json({ success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('‚ùå Error in resetPassword:', err);
    res.status(err.status || 500).json({
      status: err.status || 500,
      errors: err.message || 'Internal Server Error',
    });
  }
};

export default {
  signup,
  signin,
  current,
  getMe,
  updateMe,
  signout,
  refreshTokens,
  sendVerificationEmail,
  verifyEmail,
  forgotPassword,
  resetPassword,
};
